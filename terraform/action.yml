name: Terraform plan, publish plan result into PR and apply steps
description: "terraform tool common flow action to plan, publish plan into PR comment and apply result"
author: Das Meta
branding:
  icon: globe
  color: purple
inputs:
  github-token:
    description: "GitHub token for commenting on PRs. Defaults to using 'secrets.GITHUB_TOKEN'"
    required: false
  fetch-depth: 
    description: "Number of commits to fetch. 0 indicates all history for all branches and tags."
    required: false
    default: ""
  aws-region: 
    description: "AWS Region, e.g. us-east-2"
    required: false
    default: us-east-1
  aws-access-key-id: 
    description: "AWS Access Key ID. This input is required if running in the GitHub hosted environment."
    required: false 
  aws-secret-access-key:
    description: "AWS Secret Access Key. This input is required if running in the GitHub hosted environment."
    required: false
  path:
    description: "This is for file that plan will redirect into it like plan.txt"
    required: false
    default: folder1
  backend:
    description: "Disable or Enable Backend"
    required: false
    default: "false"
  backend-config:
    description: "Configuration to be merged with what is in the configuration file's 'backend' block."
    required: false
    default: "backend.hcl"
  var-file:
    description: "Variable file"
    required: false
    default: "env.tfvars"
  is-pr:
    description: "Allows to disable plan result posting into github PR as comment"
    required: false
    default: "true"
  do-apply:
    description: "Allows to enable plan result direct apply"
    required: false
    default: "false"
  terraform_version:
    description: "Terraform version used in this action"
    required: false
    default: 1.3.6

runs:
  using: "composite"
  steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        fetch-depth: ${{ inputs.fetch-depth }}

    - name: Merge branches
      if: ${{inputs.is-pr == 'true'}}
      uses: devmasx/merge-branch@master
      with:
        type: now
        target_branch: ${{ github.event.pull_request.base.ref }}
        github_token: ${{ inputs.github-token }}

    - uses: marceloprado/has-changed-path@v1
      id: changed
      with:
        paths: ${{ inputs.path }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ inputs.aws-region }}
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: Initialize Terraform
      run: |
        pwd
        ls -hla
        echo $PWD
        cd ${{ inputs.path }}
        terraform init -backend="${{inputs.backend}}" -backend-config="${{inputs.backend-config}}"
      shell: bash

    - name: Plan Terraform
      id: plan
      run: |
        cd ${{ inputs.path }}
        terraform plan -var-file="${{inputs.var-file}}" -no-color -out=plan.tfplan \
        && terraform show -no-color plan.tfplan
      shell: bash

    - run: echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > ${{inputs.path}}/plan.txt
      shell: bash

    - name: Put Plan Files in ENV Vars
      run: |
        PLAN=$(cat ${{inputs.path}}/plan.txt)
        echo "PLAN<<EOF" >> $GITHUB_ENV
        echo "$PLAN" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      shell: bash

    - name: Post Plan to GitHub PR
      if: ${{inputs.is-pr == 'true'}}
      uses: mshick/add-pr-comment@v1
      with:
        repo-token: ${{ inputs.github-token }}
        allow-repeats: true
        repo-token-user-login: 'github-actions[bot]'
        message: |
            ## Plan Output
           
            ```diff
            ${{ env.PLAN }}
            ```
            
            Merge to apply all of the above

    - name: Apply Terraform
      if: ${{inputs.do-apply == 'true'}}
      id: apply
      run: |
        cd ${{ inputs.path }}
        terraform apply -input=false plan.tfplan
      shell: bash
